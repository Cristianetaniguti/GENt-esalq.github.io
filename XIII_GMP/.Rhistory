test_list
minha_funcao <- function(df.entrada){
if (length(grep("Altura", colnames(df.entrada))) == 0 ||
length(grep("Peso", colnames(df.entrada))) == 0 ||
length(grep("Idade", colnames(df.entrada))) == 0 ||
length(grep("Genero", colnames(df.entrada))) == 0)
stop("Esta faltando alguma das informações.")
## Calcula o índice de massa corporal (IMC) dos participantes
IMC <- df.entrada$Peso/quadra(df.entrada$Altura)
## Calcula a média das idade dos participantes
id_med <- mean(df.entrada$Idade)
## Calcula a mediana das idades dos participantes
id_median <- median(df.entrada$Idade)
## Calcula a porgentagem de mulheres entre os participantes
mul <- 100*(length(which(df.entrada$Genero == "Feminino"))/length(df.entrada$Genero))
## Faz uma lista com todos os resultados
final_list <- list(IMC=IMC, idade_media = id_med,
idade_mediana = id_median, porcentagem_mulheres = mul)
return(final_list)
}
test_list <- minha_funcao(df.entrada = dados)
source("funcoes.R")
#### Bar plot ####
#É um gráfico interessante quando possuímos resultados da função table
gen <- table(dados$Genero)
barplot(gen)
nota_gen <- table(dados$ConhecimentoR, dados$Genero)
barplot(t(nota_gen))
#Busque explorar mais parâmetros no gráfico a seguir:
##Dica: tente alterar o nome dos eixos
plot(x = dados$Peso, y= dados$Altura)
#Linha de ajuste
abline(lm(Altura ~ Peso, data = dados), col="red")
#Verificar a correlação:
cor(dados$Altura, dados$Peso)
#1-) Fazer a divisão da tela:
par(mfrow=c(1,2))
#2-) Criar o barplot, da maneira que já aprendemos:
##Criar a tabela considerando as informacoes de Area e Genero
nota_gen <-table(dados$Area, dados$Genero)
##Note o parâmetro beside (que estava nas dicas)
barplot(t(nota_gen),beside = TRUE, col = c("wheat", "tomato2"), main = "Distribuição das
pessoas \n de acordo com área e nota do R", xlab = "Nota do R")
##Colocar a legenda no gráfico
legend("topright", title = "Gênero", legend=c("F","M"), fill = c("wheat", "tomato2"), bty = "n", cex = 0.7)
#3-) Criar o dotchart #Criar a coluna atribuindo uma cor para cada área
dados$color[dados$Area=="Exatas"] <- "darkblue"
dados$color[dados$Area=="Biologicas"] <- "darkgreen"
dados$color[dados$Area=="Humanas"] <- "orange"
dados$color[dados$Area=="Interdiciplinar"] <- "red"
dados$color[dados$Area=="Agrarias"] <- "black"
##Colocar os pesos em ordem:
dados <- dados[order(dados$Peso),]
##Colocar o título, note que o '\n' está sendo usado para fazer a quebra de linha:
dotchart(dados$Peso, labels = dados$Cidade, groups = as.factor(dados$Area),
color = dados$color, font=2, main = "Peso de acordo com as cidades, \n agrupando por área",
xlab = "Peso", pch = 7)
#4-) Manter novamente uma figura por gráfico
par(mfrow=c(1,1))
library("ggplot2")
ggplot(dados) +
geom_point(aes(x=Peso, y=Altura))
ggplot(dados) +
geom_point(aes(x=Peso, y=Altura, colour=Genero))
ggplot(dados) +
geom_point(aes(x=Peso, y=Altura, color=Genero), size=12)
ggplot(dados) +
geom_boxplot(aes(x=Area, y=ConhecimentoR))
ggplot(dados) +
geom_boxplot(aes(x=Area, y=ConhecimentoR, fill=Area))
ggplot(dados) +
geom_boxplot(aes(x=Area, y=ConhecimentoR, fill=Area), show.legend = FALSE)
library('tm')
library('SnowballC')
library('wordcloud')
dataCorpus <- Corpus(VectorSource(dados$Motivacao))
dataCorpus <- tm_map(dataCorpus, content_transformer(tolower))
dataCorpus <- tm_map(dataCorpus, removePunctuation)
dataCorpus <- tm_map(dataCorpus, removeWords, stopwords('pt'))
wordcloud(dataCorpus,max.words=100,colors=c("#2553A4","#11A858"))
# Carregar os pacotes
library("dplyr")
library("osmdata")
library("ggmap")
library("sf")
library("rnaturalearth")
library("rnaturalearthdata")
library("rgeos")
# Encontrar latitude e longitude das cidades
cidades <- data.frame(Long=NA, Lat=NA)
for(idx in 1:nrow(dados)){
latLong <- getbb(paste0(dados$Cidade[idx]," ", "Brazil"))
cidades[idx, ] <- rowMeans(latLong)
}
# Obter as fronteiras no mapa mundial
world <- ne_countries(scale = "medium", returnclass = "sf")
#Fazer o mapa
ggplot(data = world) +
geom_sf() +
geom_point(data = cidades,
aes(x = Long, y = Lat, fill = "red"),
size = 2, shape = 21, show.legend = FALSE) +
coord_sf(xlim = c(-74, -30), ylim = c(-35, 5), expand = FALSE)
str(dados)
# Certifique-se que esta lidando com variável categórica (fator)
dados$Genero <- as.factor(dados$Genero)
tapply(dados$Altura, dados$Genero, summary)
tapply(dados$Peso, dados$Genero, summary)
mod1 <- lm(Peso ~ Genero, data = dados)
summary(mod1)
# ou o equivalente
mod1 <- aov(Peso ~ Genero, data = dados)
summary(mod1)
load("clima_lond.RData")
# Verificando se as variáveis categórias estão como fatores
str(clima_lond)
clima_lond$dia <- as.factor(clima_lond$dia)
# A precipitação nesse caso é uma variável contínua, nao categórica, para transformá-la use:
clima_lond$prec.mm <- as.numeric(as.character(clima_lond$prec.mm))
# Já com o tapply podemos ver as diferenças
tapply(clima_lond$prec.mm, clima_lond$Mes, summary)
levels(clima_lond$Mes)
pos <- match(c("Janeiro", "Fevereiro", "Marco", "Abril", "Maio", "Junho"), levels(clima_lond$Mes))
pos
clima_lond$Mes = factor(clima_lond$Mes,
levels(clima_lond$Mes)[pos])
# Refazendo
tapply(clima_lond$prec.mm, clima_lond$Mes, summary)
plot(prec.mm~Mes, data = clima_lond, main="Médias",
xlab = "Meses do ano de 2017",
ylab = "Precipitação em mm")
barplot(tapply(clima_lond$prec.mm, clima_lond$Mes, sum),
main="Total Mensal",
xlab = "Meses do ano de 2017",
ylab = "Precipitação em mm")
mod <- lm(prec.mm ~ Mes, data = clima_lond)
summary(mod)
mod <- lm(prec.mm ~ dia, data = clima_lond)
summary(mod)
modaov <- aov(prec.mm ~ Mes, data = clima_lond)
tukey.test <- TukeyHSD(x=modaov, 'Mes', conf.level=0.95)
tukey.test
#rm(list = ls())
ls()
#setwd("/home/kaio/Desktop/Curso_ESALQ_R")
getwd()
data <- read.table("cafe.txt", h = TRUE, sep = "\t", dec = ",")
str(data)
# Transformar em fator
data$rep <- as.factor(data$rep)
data$prog <- as.factor(data$prog)
data$colheita <- as.factor(data$colheita)
str(data)
# Outra opção
data <- transform(data, rep = factor(rep), prog = factor(prog), colheita = factor(colheita))
str(data)
# Indexar primeita colheita
Colheita_1 <- subset(data, colheita == 1)
str(Colheita_1)
# Droplevels
Colheita_1 <- droplevels(subset(data, colheita == 1))
str(Colheita_1)
# Modelo
Modelo1 <- aov(prod ~ rep + prog,
contrasts = list(prog = "contr.sum"),
data = Colheita_1)
anova(Modelo1)
####################################################
###verificar Pressupostos da análise de variância###
####################################################
names(Modelo1)
Modelo1_residuals <- Modelo1$residuals #armazenando os erros ou res?duos
# teste de Normalidade DOS ERROS##
#---------------------------------#
shapiro.test (Modelo1_residuals) # Hipótese de Nulidade
# a hipótese de que os erros são normais, nesse caso, como o p-value = 0.24
# ou seja, >0.05 ou 0.01 ou qualquer alfa adotado, não se rejeita a hipotese de normalidade
#Verificar pressupostos de análises
diagnostics(Modelo1$residuals, Modelo1$fitted.values)
diagnostics(Modelo1$residuals, Modelo1$fitted.values)
# Verificar outlier
outlier(Modelo1$residuals, alpha=0.05)
# Index output
QME <- anova(Modelo1)["Residuals", "Mean Sq"]
QME
med <- mean(data$prod, na.rm = TRUE)
med
# Calcular CV
CVe <- (sqrt(QME)/med)*100
CV_E <- function(anova, med){
QME <- anova(anova)["Residuals", "Mean Sq"]
CVe <- (sqrt(QME)/med)*100
return(CVe)
}
##
CV_E(anova = Modelo1, med = med)
# Herdabilidade
n_rep <- nlevels(Colheita_1$rep)
VG <- (anova(Modelo1)["prog", "Mean Sq"]- QME)/n_rep
H_2 <- VG/ (VG + VE)
H_2
VE <- QME
H_2 <- VG/ (VG + VE)
H_2
# Teste de comparações mútiplas
# análise de variância utilizando o ExpDes
#install.packages("ExpDes")
library(ExpDes)
rbd(Colheita_1$prog, Colheita_1$rep, Colheita_1$prod, mcomp = "tukey", sigT = 0.05, sigF = 0.05)
# Teste Sk
rbd(Colheita_1$prog, Colheita_1$rep, Colheita_1$prod, mcomp = "sk", sigT = 0.05, sigF = 0.05)
# função by é similar ao subset
by(data, data$colheita, function (x) anova(aov(prod ~ prog + rep, data= x)))
#outra opção selecionando apenas a parte da dataframe onde colheita igual a "2"
anova(aov(data$prod ~ data$prog + data$rep, data = data[data$colheita==2,]))
# mais uma opção
indiv <- lapply(split(data, data$colheita), aov, formula = prod ~ rep + prog)
lapply(indiv, summary)
#install.packages("agricolae")
library(agricolae)
trt < -c("0","1","2","5","10","20","50","100","Dina")
trt <- c("0","1","2","5","10","20","50","100","Dina")
rcbd <- design.rcbd(trt, 6, serie = 1, seed = 1, "default") # seed = 1
rcbd # Planilha de campo
# Salvar Sorteio
write.table(rcbd,"SORTEIO.txt", row.names=FALSE, sep="\t")
file.show("SORTEIO.txt")
install.packages("prettydoc")
dados <- read.csv(file = "dados.csv", stringsAsFactors = FALSE, na.strings="-")
str(dados)
if(dados[3,4] < 1.5){
print("Híbrido pequeno demais")
} else {
print("Tamanho provavelmente adequado")
}
if(dados[7,4] < 1.5){
print("Híbrido pequeno demais")
} else if (dados[7,3] > 1.5 && dados[7,1] < 2.0){
print("Tamanho OK")
} else {
print("Cresceu demais")
}
for(i in 1:nrow(dados)){
if(dados[i,5] < 1.5){
print("Híbrido pequeno demais")
} else if (dados[i,5] > 1.5 && dados[i,5] < 2.0){
print("Tamanho OK")
} else {
print("Cresceu demais")
}
}
library(desplot) # Este comando será necessário toda vez que for utilizar o pacote
row <- rep(rep(1:10, each=5),4)
col <- c(rep(1:5,10),rep(6:10,10), rep(11:15,10), rep(16:20,10))
dados.up <- cbind(col, row, dados_compl)
row <- rep(rep(1:10, each=5),4)
col <- c(rep(1:5,10),rep(6:10,10), rep(11:15,10), rep(16:20,10))
dados.up <- cbind(col, row, dados)
desplot(Bloco ~ col+row, dados.up,
text=Hibrido, cex=1, out1=Bloco,
out2=Hibrido, out2.gpar=list(col = "gray50", lwd = 1, lty = 1))
nota_gen <- table(dados$ConhecimentoR, dados$Genero)
barplot(t(nota_gen))
t(nota_gen)
table(dados$ConhecimentoR, dados$Genero)
?cbind
rep(3:5, 2)
<img src="https://cdn.pixabay.com/photo/2016/12/23/18/13/communication-1927706_960_720.jpg" alt="drawing" width="100"/>
#########################
# Script Curso R
# Data: 23/07/2019
# GENt
##########################
cat("Hello world!")
# Depende do seu computador
# setwd("~/Documents/CursoR")
getwd() # Se tiver perdido
1+1.3                 #Decimal definido com "."
2*3
2^3
4/2
sqrt(4)              #raíz quadrada
log(100, base = 10)  #logarítmo na base 10
log(100)             #logarítmo com base neperiana
# Resolvendo problema
((13+2+1.5)/3) + log(96, base = 4)
# Pedindo ajuda sobre função do R
?log
# Operação com vetores
# Diferentes formas de criar um vetor
c(1,3,2,5,2)
1:10
seq(from=0, to=100, by=5)
# ou
seq(0,100,5) # Se você já souber a ordem dos argumentos da função
seq(from=4, to=30, by=3)
rep(3:5, 2)
# Operações
c(1,4,3,2)*2  # Multiplica todos os elementos por 2
c(4,2,1,5)+c(5,2,6,1) # Soma 4+5, 2+2, 1+6 e assim por diante
c(4,2,1,5)*c(5,2,6,1) # Multiplica 4*5, 2*2, 1*6 e assim por diante
# Criando objetos
x = c(30.1,30.4,40,30.2,30.6,40.1)
# ou
x <- c(30.1,30.4,40,30.2,30.6,40.1)
y = c(0.26,0.3,0.36,0.24,0.27,0.35)
# Operações com os objetos
x*2
x + y
x*y
z <- (x+y)/2
z
# Aplicando algumas funções
sum(z)  # soma dos valores de z
mean(z) # média
var(z)  # variância
# Obtendo valores internos dos objetos por indexação
z[3] # elemento na terceira posição do vetor
z[2:4]
# Para saber algumas características do objeto
str(z)
# Vetor de caracteres
clone <- c("GRA02", "URO01", "URO03", "GRA02", "GRA01", "URO01")
# Vetor de fatores (ou variáveis categóricas)
clone_fator <- as.factor(clone)
str(clone_fator)
levels(clone_fator)
length(clone_fator)
# Vetor lógico
logico <- x > 40
logico   # Os elementos são maiores que 40?
# Indica a posição dos TRUE
which(logico)  # Obtendo as posiçoes dos elementos TRUE
=
x[which(logico)] # Obtendo os números maiores que 40 do vetor x pela posição
# Para ficar esperto/a
(a <- 1:10)
b <- seq(from = 0.1, to = 1, 0.1)
(b <- b*10)
a==b        # Existe um problema computacional de armazenamento
a==round(b) # Evitar que isso aconteceça arredondando o resultado
?round      # Fiquei com dúvida nessa função
errado <- c(TRUE, "vish", 1) # Não podemos misturar classes num mesmo vetor
errado
save.image("dia1.RData")
load("dia1.RData")
#########################
# Script Curso R
# Data: 23/07/2019
# GENt
##########################
cat("Hello world!")
# Depende do seu computador
# setwd("~/Documents/CursoR")
getwd() # Se tiver perdido
1+1.3                 #Decimal definido com "."
2*3
2^3
4/2
sqrt(4)              #raíz quadrada
log(100, base = 10)  #logarítmo na base 10
log(100)             #logarítmo com base neperiana
# Resolvendo problema
((13+2+1.5)/3) + log(96, base = 4)
# Pedindo ajuda sobre função do R
?log
# Operação com vetores
# Diferentes formas de criar um vetor
c(1,3,2,5,2)
1:10
seq(from=0, to=100, by=5)
# ou
seq(0,100,5) # Se você já souber a ordem dos argumentos da função
seq(from=4, to=30, by=3)
rep(3:5, 2)
# Operações
c(1,4,3,2)*2  # Multiplica todos os elementos por 2
c(4,2,1,5)+c(5,2,6,1) # Soma 4+5, 2+2, 1+6 e assim por diante
c(4,2,1,5)*c(5,2,6,1) # Multiplica 4*5, 2*2, 1*6 e assim por diante
# Criando objetos
x = c(30.1,30.4,40,30.2,30.6,40.1)
# ou
x <- c(30.1,30.4,40,30.2,30.6,40.1)
y = c(0.26,0.3,0.36,0.24,0.27,0.35)
# Operações com os objetos
x*2
x + y
x*y
z <- (x+y)/2
z
# Aplicando algumas funções
sum(z)  # soma dos valores de z
mean(z) # média
var(z)  # variância
# Obtendo valores internos dos objetos por indexação
z[3] # elemento na terceira posição do vetor
z[2:4]
# Para saber algumas características do objeto
str(z)
# Vetor de caracteres
clone <- c("GRA02", "URO01", "URO03", "GRA02", "GRA01", "URO01")
# Vetor de fatores (ou variáveis categóricas)
clone_fator <- as.factor(clone)
str(clone_fator)
levels(clone_fator)
length(clone_fator)
# Vetor lógico
logico <- x > 40
logico   # Os elementos são maiores que 40?
# Indica a posição dos TRUE
which(logico)  # Obtendo as posiçoes dos elementos TRUE
=
x[which(logico)] # Obtendo os números maiores que 40 do vetor x pela posição
# Para ficar esperto/a
(a <- 1:10)
b <- seq(from = 0.1, to = 1, 0.1)
(b <- b*10)
a==b        # Existe um problema computacional de armazenamento
a==round(b) # Evitar que isso aconteceça arredondando o resultado
?round      # Fiquei com dúvida nessa função
errado <- c(TRUE, "vish", 1) # Não podemos misturar classes num mesmo vetor
errado
# Matrizes
X <- matrix(1:12, nrow = 6, ncol = 2)
X
W <- matrix(c(x,y), nrow = 6, ncol =2)
W
X*2
X*X
X%*%t(X)          # Multiplicação matricial
W[4,2] # Número posicionado na linha 4 e coluna 2
colnames(W) <- c("altura", "diametro")
rownames(W) <- clone
W
# Data.frames
campo1 <- data.frame("clone" = clone,     # Antes do sinal de "="
"altura" = x,        # estabelecemos os nomes
"diametro" = y,      # das colunas
"idade" = rep(3:5, 2),
"corte"= logico)
campo1
# Acessando a coluna de idades
campo1$idade
# ou
campo1[,4]
# Especificando linha e coluna
campo1[1,2]
# Diâmetro do URO03
campo1[3,3]
# Volume
volume <- 3.14*((campo1$diametro/2)^2)*campo1$altura
volume
# Adicionando volume ao data.frame campo1
campo1 <- cbind(campo1, volume)
str(campo1)
# Exportando tabelas
write.table(campo1, file = "campo1.txt", sep = ";", dec = ".", row.names = FALSE)
write.csv(campo1, file = "campo1.csv", row.names = TRUE)
# Importando tabelas
campo1_txt <- read.table(file = "campo1.txt", sep=";", dec=".", header = TRUE)
campo1_csv <- read.csv(file = "campo1.csv")
head(campo1_txt)
head(campo1_csv)
save.image("dia1.RData")
Repeticao <- rep(1:4,3)
Tratamento <- c(rep("L.A",4), rep("L.B",4), rep ("hibridoAB", 4) )
numero_folhas <- c(5,4,5,NA,13,9,10,11,6,9,9,9)
altura <- c(95,55,70,NA,61,77,80,97,140,155,175,170)
comprimento <- c(86,30,69,NA,80,77,88,87,95,75,95,100)
campo1 <- data.frame("Repeticao" = Repeticao,     # Antes do sinal de "="
"Tratamento" = Tratamento,        # estabelecemos os nomes
"numero_folhas" = numero_folhas,      # das colunas
"altura" = altura,
"comprimento"= comprimento)
campo1
lm(comprimento ~ Tratamento, data=campo1)
aov(lm(comprimento ~ Tratamento, data=campo1))
anova(lm(comprimento ~ Tratamento, data=campo1))
anova(lm(altura ~ Tratamento, data=campo1))
anova(lm(numero_folhas ~ Tratamento, data=campo1))
dados
# Leitura dos dados
read.table("pimenta_data.csv")
read.csv("pimenta_data.csv")
# Leitura dos dados
dados_pim <- read.csv("pimenta_data.csv")
str(dados_pim)
# Leitura dos dados
dados_pim <- read.csv("pimenta_data.csv")
str(dados_pim)
# Certifique-se que esta lidando com variável categórica (fator)
dados_pim$gen <- as.factor(dados_pim$gen)
dados_pim$rep <- as.factor(dados_pim$rep)
tapply(dados_pim$gen, dados_pim$rep, summary)
tapply(dados$alt, dados_pim$gen, summary)
tapply(dados_pim$alt, dados_pim$gen, summary)
tapply(dados_pim$alt, dados_pim$rep, summary)
mod1 <- lm(alt ~ gen, data = dados_pim)
summary(mod1)
anova(mod1)
mod1 <- lm(AlturaPlantas ~ AlturaEspiga, data = dados_pim)
str(dados_pim)
mod1 <- lm(alt ~ prim_int, data = dados_pim)
summary(mod1)
mod1 <- lm(alt ~ prim_in, data = dados_pim)
summary(mod1)
mod1 <- aov(alt ~ gen, data = dados_pim)
summary(mod1)
modaov <- aov(alt ~ gen, data = dados_pim)
tukey.test <- TukeyHSD(x=modaov, 'gen', conf.level=0.95)
tukey.test
plot(mod1)

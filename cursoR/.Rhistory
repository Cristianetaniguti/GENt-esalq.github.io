ex_mat <- matrix(nrow=10, ncol=10)
# cada número dentro da matrix será o produto no índice da coluna pelo índice da linha
for(i in 1:dim(ex_mat)[1]) {   # Primeiro nível, não tem espaço
for(j in 1:dim(ex_mat)[2]) { # Segundo nível tem um espaço (tab)
ex_mat[i,j] = i*j          # Terceiro nível tem dois espaços
}                            # Fechei o segundo nível
}                              # Fechei o primeiro nível
quadra <- function(x){
z <- x*x
return(z)
}
quadra(3)
quadra(4)
qualquer_nome <- 4
quadra(qualquer_nome)
## Calcula o índice de massa corporal (IMC) dos participantes
IMC <- dados$Peso/quadra(dados$Altura)
## Calcula a média das idade dos participantes
id_med <- mean(dados$Idade)
## Calcula a mediana das idades dos participantes
id_median <- median(dados$Idade)
## Calcula a porgentagem de mulheres entre os participantes
mul <- 100*(length(which(dados$Genero == "Feminino"))/length(dados$Genero))
## Faz uma lista com todos os resultados
final_list <- list(IMC=IMC, idade_media = id_med,
idade_mediana = id_median, porcentagem_mulheres = mul)
minha_funcao <- function(df.entrada){
## Calcula o índice de massa corporal (IMC) dos participantes
IMC <- df.entrada$Peso/quadra(df.entrada$Altura)
## Calcula a média das idade dos participantes
id_med <- mean(df.entrada$Idade)
## Calcula a mediana das idades dos participantes
id_median <- median(df.entrada$Idade)
## Calcula a porgentagem de mulheres entre os participantes
mul <- 100*(length(which(df.entrada$Genero == "Feminino"))/length(df.entrada$Genero))
## Faz uma lista com todos os resultados
final_list <- list(IMC=IMC, idade_media = id_med,
idade_mediana = id_median, porcentagem_mulheres = mul)
return(final_list)
}
test_list <- minha_funcao(df.entrada = dados)
test_list
minha_funcao <- function(df.entrada){
if (length(grep("Altura", colnames(df.entrada))) == 0 ||
length(grep("Peso", colnames(df.entrada))) == 0 ||
length(grep("Idade", colnames(df.entrada))) == 0 ||
length(grep("Genero", colnames(df.entrada))) == 0)
stop("Esta faltando alguma das informações.")
## Calcula o índice de massa corporal (IMC) dos participantes
IMC <- df.entrada$Peso/quadra(df.entrada$Altura)
## Calcula a média das idade dos participantes
id_med <- mean(df.entrada$Idade)
## Calcula a mediana das idades dos participantes
id_median <- median(df.entrada$Idade)
## Calcula a porgentagem de mulheres entre os participantes
mul <- 100*(length(which(df.entrada$Genero == "Feminino"))/length(df.entrada$Genero))
## Faz uma lista com todos os resultados
final_list <- list(IMC=IMC, idade_media = id_med,
idade_mediana = id_median, porcentagem_mulheres = mul)
return(final_list)
}
test_list <- minha_funcao(df.entrada = dados)
#### Bar plot ####
#É um gráfico interessante quando possuímos resultados da função table
gen <- table(dados$Genero)
barplot(gen)
nota_gen <- table(dados$ConhecimentoR, dados$Genero)
barplot(t(nota_gen))
#Busque explorar mais parâmetros no gráfico a seguir:
##Dica: tente alterar o nome dos eixos
plot(x = dados$Peso, y= dados$Altura)
#Linha de ajuste
abline(lm(Altura ~ Peso, data = dados), col="red")
#Verificar a correlação:
cor(dados$Altura, dados$Peso)
#1-) Fazer a divisão da tela:
par(mfrow=c(1,2))
#2-) Criar o barplot, da maneira que já aprendemos:
##Criar a tabela considerando as informacoes de Area e Genero
nota_gen <-table(dados$Area, dados$Genero)
##Note o parâmetro beside (que estava nas dicas)
barplot(t(nota_gen),beside = TRUE, col = c("wheat", "tomato2"), main = "Distribuição das
pessoas \n de acordo com área e nota do R", xlab = "Nota do R")
##Colocar a legenda no gráfico
legend("topright", title = "Gênero", legend=c("F","M"), fill = c("wheat", "tomato2"), bty = "n", cex = 0.7)
#3-) Criar o dotchart #Criar a coluna atribuindo uma cor para cada área
dados$color[dados$Area=="Exatas"] <- "darkblue"
dados$color[dados$Area=="Biologicas"] <- "darkgreen"
dados$color[dados$Area=="Humanas"] <- "orange"
dados$color[dados$Area=="Interdiciplinar"] <- "red"
dados$color[dados$Area=="Agrarias"] <- "black"
##Colocar os pesos em ordem:
dados <- dados[order(dados$Peso),]
##Colocar o título, note que o '\n' está sendo usado para fazer a quebra de linha:
dotchart(dados$Peso, labels = dados$Cidade, groups = as.factor(dados$Area),
color = dados$color, font=2, main = "Peso de acordo com as cidades, \n agrupando por área",
xlab = "Peso", pch = 7)
#4-) Manter novamente uma figura por gráfico
par(mfrow=c(1,1))
library("ggplot2")
ggplot(dados) +
geom_point(aes(x=Peso, y=Altura))
ggplot(dados) +
geom_point(aes(x=Peso, y=Altura, colour=Genero))
ggplot(dados) +
geom_point(aes(x=Peso, y=Altura, color=Genero), size=12)
ggplot(dados) +
geom_boxplot(aes(x=Area, y=ConhecimentoR))
ggplot(dados) +
geom_boxplot(aes(x=Area, y=ConhecimentoR, fill=Area))
ggplot(dados) +
geom_boxplot(aes(x=Area, y=ConhecimentoR, fill=Area), show.legend = FALSE)
install.packages(c('tm', 'SnowballC', 'wordcloud'))
library('tm')
library('SnowballC')
library('wordcloud')
dataCorpus <- Corpus(VectorSource(dados$Motivacao))
dataCorpus <- tm_map(dataCorpus, content_transformer(tolower))
dataCorpus <- tm_map(dataCorpus, removePunctuation)
dataCorpus <- tm_map(dataCorpus, removeWords, stopwords('pt'))
wordcloud(dataCorpus,max.words=100,colors=c("#2553A4","#11A858"))
# Carregar os pacotes
library("osmdata")
library("ggmap")
library("sf")
install.packages("sf")
install.packages("sf")
library("osmdata")
library("ggmap")
library("sf")
install.packages("dplyr")
install.packages("dplyr")
# Carregar os pacotes
library("osmdata")
# Carregar os pacotes
library("osmdata")
library("ggmap")
library("sf")
library("rnaturalearth")
library("rnaturalearthdata")
read.csv("dados_alunos.csv", stringsAsFactors = FALSE, na.strings = "-")
dados <- read.csv("dados_alunos.csv", stringsAsFactors = FALSE, na.strings = "-")
save(dados, file = "dados_alunos.RData")
cat("Hello world")
# cat("Hello world")
# Iniciando os trabalhos no R
cat("Hello world")
((13+2+1.5)/3) + log(96, base = 4)
c(1,3,2,5,2)
1:10
seq(from=0, to=100, by=5)
# ou
seq(0,100,5) # Se você já souber a ordem dos argumentos da função
seq(from=4, to=30, by=3)
rep(3:5, 2)
x = c(30.1,30.4,40,30.2,30.6,40.1)
# ou
x <- c(30.1,30.4,40,30.2,30.6,40.1)
y = c(0.26,0.3,0.36,0.24,0.27,0.35)
x
x*2
x + y
x*y
z <- (x+y)/2
z
sum(z)  # soma dos valores de z
mean(z) # média
var(z)  # variância
z[3]
z[2:4]
str(z)
clone <- c("GRA02", "URO01", "URO03", "GRA02", "GRA01", "URO01")
clone_fator <- as.factor(clone)
str(clone_fator)
levels(clone_fator)
length(clone_fator)
logico <- x > 40
logico   # Os elementos são maiores que 40?
which(logico)  # Obtendo as posiçoes dos elementos TRUE
x[which(logico)] # Obtendo os números maiores que 40 do vetor x pela posição
(a <- 1:10)
b <- seq(from = 0.1, to = 1, 0.1)
(b <- b*10)
a==b
a==round(b)
errado <- c(TRUE, "vish", 1)
errado
X <- matrix(1:12, nrow = 6, ncol = 2)
X
W <- matrix(c(x,y), nrow = 6, ncol =2)
W
X*2
X*X
X%*%t(X)          # Multiplicação matricial
W[4,2] # Número posicionado na linha 4 e coluna 2
colnames(W) <- c("altura", "diametro")
rownames(W) <- clone
W
campo1 <- data.frame("clone" = clone,     # Antes do sinal de "="
"altura" = x,        # estabelecemos os nomes
"diametro" = y,      # das colunas
"idade" = rep(3:5, 2),
"corte"= logico)
campo1
campo1$idade
campo1[,4]
campo1[1,2]
campo1[3,3]
volume <- 3.14*((campo1$diametro/2)^2)*campo1$altura
volume
campo1 <- cbind(campo1, volume)
str(campo1)
minha_lista <- list(campo1 = campo1, media_alt = tapply(campo1$altura, campo1$idade, mean), matrix_ex = W)
str(minha_lista)
minha_lista[[1]]
# ou
minha_lista$campo1
(meu_array <- array(1:24, dim = c(2,3,4)))
load("dados_alunos.RData")
str(dados)
# também
dim(dados)
colnames(dados) <- c("Data_pesq", "Idade", "Niver", "Genero", "Cidade",
"Altura","Peso", "Area", "ConhecimentoR", "Outras_linguagens",
"Utilizacao", "Motivacao")
str(dados)
nrow(dados)
if(2 >3){
print("dois é maior que três")
} else {
print("dois não é maior que três")
}
if(dados[3,9] == 0){
print("Nunca é tarde para começar!")
} else {
print("Já pegou o embalo, agora é só continuar!")
}
if(dados[7,9] == 0){
print("Nunca é tarde para começar!")
} else if (dados[3,9] > 0 && dados[3,9] < 5){
print("Já pegou o embalo, agora é só continuar!")
} else {
print("Nos avise se estivermos falando algo errado...hehe")
}
switch(dados[5,8],
Exatas = print("Será que aprendeu alguma linhagem de programação na graduação?"),
Interdiciplinar = print("Em que foi a gradução?"),
print("Ta aqui colocando o pezinho na exatas")
)
for(i in 1:10){
print(i)
}
test <- vector()
for(i in 1:10){
test[i] <- i+4
}
test
dados[,9]
cat("Hello world")
# cat("Hello world")
# Iniciando os trabalhos no R
cat("Hello world")
((13+2+1.5)/3) + log(96, base = 4)
c(1,3,2,5,2)
1:10
seq(from=0, to=100, by=5)
# ou
seq(0,100,5) # Se você já souber a ordem dos argumentos da função
seq(from=4, to=30, by=3)
rep(3:5, 2)
x = c(30.1,30.4,40,30.2,30.6,40.1)
# ou
x <- c(30.1,30.4,40,30.2,30.6,40.1)
y = c(0.26,0.3,0.36,0.24,0.27,0.35)
x
x*2
x + y
x*y
z <- (x+y)/2
z
sum(z)  # soma dos valores de z
mean(z) # média
var(z)  # variância
z[3]
z[2:4]
str(z)
clone <- c("GRA02", "URO01", "URO03", "GRA02", "GRA01", "URO01")
clone_fator <- as.factor(clone)
str(clone_fator)
levels(clone_fator)
length(clone_fator)
logico <- x > 40
logico   # Os elementos são maiores que 40?
which(logico)  # Obtendo as posiçoes dos elementos TRUE
x[which(logico)] # Obtendo os números maiores que 40 do vetor x pela posição
(a <- 1:10)
b <- seq(from = 0.1, to = 1, 0.1)
(b <- b*10)
a==b
a==round(b)
errado <- c(TRUE, "vish", 1)
errado
X <- matrix(1:12, nrow = 6, ncol = 2)
X
W <- matrix(c(x,y), nrow = 6, ncol =2)
W
X*2
X*X
X%*%t(X)          # Multiplicação matricial
W[4,2] # Número posicionado na linha 4 e coluna 2
colnames(W) <- c("altura", "diametro")
rownames(W) <- clone
W
campo1 <- data.frame("clone" = clone,     # Antes do sinal de "="
"altura" = x,        # estabelecemos os nomes
"diametro" = y,      # das colunas
"idade" = rep(3:5, 2),
"corte"= logico)
campo1
campo1$idade
campo1[,4]
campo1[1,2]
campo1[3,3]
volume <- 3.14*((campo1$diametro/2)^2)*campo1$altura
volume
campo1 <- cbind(campo1, volume)
str(campo1)
minha_lista <- list(campo1 = campo1, media_alt = tapply(campo1$altura, campo1$idade, mean), matrix_ex = W)
str(minha_lista)
minha_lista[[1]]
# ou
minha_lista$campo1
(meu_array <- array(1:24, dim = c(2,3,4)))
load("dados_alunos.RData")
str(dados)
# também
dim(dados)
colnames(dados) <- c("Data_pesq", "Idade", "Niver", "Genero", "Cidade",
"Altura","Peso", "Area", "ConhecimentoR", "Outras_linguagens",
"Utilizacao", "Motivacao")
str(dados)
nrow(dados)
if(2 >3){
print("dois é maior que três")
} else {
print("dois não é maior que três")
}
if(dados[3,9] == 0){
print("Nunca é tarde para começar!")
} else {
print("Já pegou o embalo, agora é só continuar!")
}
if(dados[7,9] == 0){
print("Nunca é tarde para começar!")
} else if (dados[3,9] > 0 && dados[3,9] < 5){
print("Já pegou o embalo, agora é só continuar!")
} else {
print("Nos avise se estivermos falando algo errado...hehe")
}
switch(dados[5,8],
Exatas = print("Será que aprendeu alguma linhagem de programação na graduação?"),
Interdiciplinar = print("Em que foi a gradução?"),
print("Ta aqui colocando o pezinho na exatas")
)
for(i in 1:10){
print(i)
}
test <- vector()
for(i in 1:10){
test[i] <- i+4
}
test
for(i in 1:nrow(dados)){
if(dados[i,9] == 0){
print("Nunca é tarde para começar!")
} else if (dados[i,9] > 0 && dados[i,9] < 5){
print("Já pegou o embalo, agora é só continuar!")
} else {
print("Nos avise se estivermos falando algo errado...hehe")
}
}
dados[i,9]
dados[,9]
dados
colnames(dados)
dados$ConhecimentoR
dados <- read.csv("dados_alunos.csv", stringsAsFactors = FALSE, na.strings = "-")
save(dados, file = "dados_alunos.RData")
cat("Hello world")
# cat("Hello world")
# Iniciando os trabalhos no R
cat("Hello world")
((13+2+1.5)/3) + log(96, base = 4)
c(1,3,2,5,2)
1:10
seq(from=0, to=100, by=5)
# ou
seq(0,100,5) # Se você já souber a ordem dos argumentos da função
seq(from=4, to=30, by=3)
rep(3:5, 2)
x = c(30.1,30.4,40,30.2,30.6,40.1)
# ou
x <- c(30.1,30.4,40,30.2,30.6,40.1)
y = c(0.26,0.3,0.36,0.24,0.27,0.35)
x
x*2
x + y
x*y
z <- (x+y)/2
z
sum(z)  # soma dos valores de z
mean(z) # média
var(z)  # variância
z[3]
z[2:4]
str(z)
clone <- c("GRA02", "URO01", "URO03", "GRA02", "GRA01", "URO01")
clone_fator <- as.factor(clone)
str(clone_fator)
levels(clone_fator)
length(clone_fator)
logico <- x > 40
logico   # Os elementos são maiores que 40?
which(logico)  # Obtendo as posiçoes dos elementos TRUE
x[which(logico)] # Obtendo os números maiores que 40 do vetor x pela posição
(a <- 1:10)
b <- seq(from = 0.1, to = 1, 0.1)
(b <- b*10)
a==b
a==round(b)
errado <- c(TRUE, "vish", 1)
errado
X <- matrix(1:12, nrow = 6, ncol = 2)
X
W <- matrix(c(x,y), nrow = 6, ncol =2)
W
X*2
X*X
X%*%t(X)          # Multiplicação matricial
W[4,2] # Número posicionado na linha 4 e coluna 2
colnames(W) <- c("altura", "diametro")
rownames(W) <- clone
W
campo1 <- data.frame("clone" = clone,     # Antes do sinal de "="
"altura" = x,        # estabelecemos os nomes
"diametro" = y,      # das colunas
"idade" = rep(3:5, 2),
"corte"= logico)
campo1
campo1$idade
campo1[,4]
campo1[1,2]
campo1[3,3]
volume <- 3.14*((campo1$diametro/2)^2)*campo1$altura
volume
campo1 <- cbind(campo1, volume)
str(campo1)
minha_lista <- list(campo1 = campo1, media_alt = tapply(campo1$altura, campo1$idade, mean), matrix_ex = W)
str(minha_lista)
minha_lista[[1]]
# ou
minha_lista$campo1
(meu_array <- array(1:24, dim = c(2,3,4)))
load("dados_alunos.RData")
str(dados)
# também
dim(dados)
colnames(dados) <- c("Data_pesq", "Idade", "Niver", "Genero", "Cidade",
"Altura","Peso", "Area", "ConhecimentoR", "Outras_linguagens",
"Utilizacao", "Motivacao")
str(dados)
nrow(dados)
if(2 >3){
print("dois é maior que três")
} else {
print("dois não é maior que três")
}
if(dados[3,9] == 0){
print("Nunca é tarde para começar!")
} else {
print("Já pegou o embalo, agora é só continuar!")
}
if(dados[7,9] == 0){
print("Nunca é tarde para começar!")
} else if (dados[3,9] > 0 && dados[3,9] < 5){
print("Já pegou o embalo, agora é só continuar!")
} else {
print("Nos avise se estivermos falando algo errado...hehe")
}
switch(dados[5,8],
Exatas = print("Será que aprendeu alguma linhagem de programação na graduação?"),
Interdiciplinar = print("Em que foi a gradução?"),
print("Ta aqui colocando o pezinho na exatas")
)
for(i in 1:10){
print(i)
}
test <- vector()
for(i in 1:10){
test[i] <- i+4
}
test
for(i in 1:nrow(dados)){
if(dados[i,9] == 0){
print("Nunca é tarde para começar!")
} else if (dados[i,9] > 0 && dados[i,9] < 5){
print("Já pegou o embalo, agora é só continuar!")
} else {
print("Nos avise se estivermos falando algo errado...hehe")
}
}
table(dados$Niver)

if(dados[3,9] == 0){
print("Nunca é tarde para começar!")
} else {
print("Já pegou o embalo, agora é só continuar!")
}
if(dados[7,9] == 0){
print("Nunca é tarde para começar!")
} else if (dados[3,9] > 0 && dados[3,9] < 5){
print("Já pegou o embalo, agora é só continuar!")
} else {
print("Nos avise se estivermos falando algo errado...hehe")
}
switch(dados[5,8],
Exatas = print("Será que aprendeu alguma linhagem de programação na graduação?"),
Interdiciplinar = print("Em que foi a gradução?"),
print("Ta aqui colocando o pezinho na exatas")
)
for(i in 1:10){
print(i)
}
test <- vector()
for(i in 1:10){
test[i] <- i+4
}
test
for(i in 1:nrow(dados)){
if(dados[i,9] == 0){
print("Nunca é tarde para começar!")
} else if (dados[i,9] > 0 && dados[i,9] < 5){
print("Já pegou o embalo, agora é só continuar!")
} else {
print("Nos avise se estivermos falando algo errado...hehe")
}
}
table(dados$Niver)
library(agricolae)
library(ExpDes)
install.packages(ExpDes)
install.packages("ExpDes")
# Funções
source("DIAGNOSTICS.R")
source("outliers.R")
#Verificar pressupostos de análises
diagnostics(Modelo1$residuals, Modelo1$fitted.values)
cat("Hello world")
# cat("Hello world")
# Iniciando os trabalhos no R
cat("Hello world")
((13+2+1.5)/3) + log(96, base = 4)
c(1,3,2,5,2)
1:10
seq(from=0, to=100, by=5)
# ou
seq(0,100,5) # Se você já souber a ordem dos argumentos da função
seq(from=4, to=30, by=3)
rep(3:5, 2)
x = c(30.1,30.4,40,30.2,30.6,40.1)
# ou
x <- c(30.1,30.4,40,30.2,30.6,40.1)
y = c(0.26,0.3,0.36,0.24,0.27,0.35)
x
x*2
x + y
x*y
z <- (x+y)/2
z
sum(z)  # soma dos valores de z
mean(z) # média
var(z)  # variância
z[3]
z[2:4]
str(z)
clone <- c("GRA02", "URO01", "URO03", "GRA02", "GRA01", "URO01")
clone_fator <- as.factor(clone)
str(clone_fator)
levels(clone_fator)
length(clone_fator)
logico <- x > 40
logico   # Os elementos são maiores que 40?
which(logico)  # Obtendo as posiçoes dos elementos TRUE
x[which(logico)] # Obtendo os números maiores que 40 do vetor x pela posição
(a <- 1:10)
b <- seq(from = 0.1, to = 1, 0.1)
(b <- b*10)
a==b
a==round(b)
errado <- c(TRUE, "vish", 1)
errado
X <- matrix(1:12, nrow = 6, ncol = 2)
X
W <- matrix(c(x,y), nrow = 6, ncol =2)
W
X*2
X*X
X%*%t(X)          # Multiplicação matricial
W[4,2] # Número posicionado na linha 4 e coluna 2
colnames(W) <- c("altura", "diametro")
rownames(W) <- clone
W
campo1 <- data.frame("clone" = clone,     # Antes do sinal de "="
"altura" = x,        # estabelecemos os nomes
"diametro" = y,      # das colunas
"idade" = rep(3:5, 2),
"corte"= logico)
campo1
campo1$idade
campo1[,4]
campo1[1,2]
campo1[3,3]
volume <- 3.14*((campo1$diametro/2)^2)*campo1$altura
volume
campo1 <- cbind(campo1, volume)
str(campo1)
minha_lista <- list(campo1 = campo1, media_alt = tapply(campo1$altura, campo1$idade, mean), matrix_ex = W)
str(minha_lista)
minha_lista[[1]]
# ou
minha_lista$campo1
(meu_array <- array(1:24, dim = c(2,3,4)))
load("dados_alunos.RData")
str(dados)
# também
dim(dados)
colnames(dados) <- c("Data_pesq", "Idade", "Niver", "Genero", "Cidade",
"Altura","Peso", "Area", "ConhecimentoR", "Outras_linguagens",
"Utilizacao", "Motivacao")
str(dados)
nrow(dados)
if(2 >3){
print("dois é maior que três")
} else {
print("dois não é maior que três")
}
if(dados[3,9] == 0){
print("Nunca é tarde para começar!")
} else {
print("Já pegou o embalo, agora é só continuar!")
}
if(dados[7,9] == 0){
print("Nunca é tarde para começar!")
} else if (dados[7,9] > 0 && dados[7,9] < 5){
print("Já pegou o embalo, agora é só continuar!")
} else {
print("Nos avise se estivermos falando algo errado...hehe")
}
switch(dados[5,8],
Exatas = print("Será que aprendeu alguma linhagem de programação na graduação?"),
Interdiciplinar = print("Em que foi a gradução?"),
print("Ta aqui colocando o pezinho na exatas")
)
for(i in 1:10){
print(i)
}
test <- vector()
for(i in 1:10){
test[i] <- i+4
}
test
for(i in 1:nrow(dados)){
if(dados[i,9] == 0){
print("Nunca é tarde para começar!")
} else if (dados[i,9] > 0 && dados[i,9] < 5){
print("Já pegou o embalo, agora é só continuar!")
} else {
print("Nos avise se estivermos falando algo errado...hehe")
}
}
# Exemplo do uso da função grepl
grepl("-", dados[1,5]) # A primeira linha contem o caracter "-"
for(i in 1:nrow(dados)){
if(grepl("-", dados[i,5])){
cat("Esse/a seguiu o exemplo direitinho. Parabéns!\n")
} else {
cat("Precisamos adicionar mais informações na linha", i, "\n")
}
}
corrigir <- vector()
for(i in 1:nrow(dados)){
if(grepl("-", dados[i,5])){
cat("Esse/a seguiu o exemplo direitinho. Parabéns!\n")
} else {
cat("Precisamos adicionar mais informações na linha", i, "\n")
corrigir <- c(corrigir, i)
}
}
dados[corrigir,5]
novo <- c("São José dos Campos - SP", "Piracicaba - SP", "São Paulo - SP", "Piracicaba-SP",
"Uberlância-MG", "Piracicaba-SP", "Uberaba-MG", "São Luis-MA", "Piracicaba-SP",
"Piracicaba-SP")
dados[corrigir,5] <- novo
# Verificando se corrigiu
dados[,5]
decada <- 2019 - dados$Idade
for(i in 1:length(decada)){
if(decada[i] > 1960 && decada[i] < 1970){
print("Nasceu na década de 60")
} else if(decada[i] >= 1970 && decada[i] < 1980){
print("Nasceu na década de 70")
} else if(decada[i] >= 1980 && decada[i] < 1990){
print("Nasceu na década de 80")
} else if(decada[i] >= 1990 && decada[i] < 2000){
print("Nasceu na década de 90")
} else {
print("Xóvem")
}
}
x <- 1
while(x < 5){
x <- x + 1
print(x)
}
x <- 1
while(x < 5){
x <- x + 1
if(x==4) break
print(x)
}
x <- 1
while(x < 5){
x <- x + 1
if(x==4) next
print(x)
}
x <- 1
repeat{
x <- x+1
print(x)
if(x==4) break
}
# Criando uma matrix vazia
ex_mat <- matrix(nrow=10, ncol=10)
# cada número dentro da matrix será o produto no índice da coluna pelo índice da linha
for(i in 1:dim(ex_mat)[1]) {
for(j in 1:dim(ex_mat)[2]) {
ex_mat[i,j] = i*j
}
}
# Criando uma matrix vazia
ex_mat <- matrix(nrow=10, ncol=10)
# cada número dentro da matrix será o produto no índice da coluna pelo índice da linha
for(i in 1:dim(ex_mat)[1]) {   # Primeiro nível, não tem espaço
for(j in 1:dim(ex_mat)[2]) { # Segundo nível tem um espaço (tab)
ex_mat[i,j] = i*j          # Terceiro nível tem dois espaços
}                            # Fechei o segundo nível
}                              # Fechei o primeiro nível
quadra <- function(x){
z <- x*x
return(z)
}
quadra(3)
quadra(4)
qualquer_nome <- 4
quadra(qualquer_nome)
## Calcula o índice de massa corporal (IMC) dos participantes
IMC <- dados$Peso/quadra(dados$Altura)
## Calcula a média das idade dos participantes
id_med <- mean(dados$Idade)
## Calcula a mediana das idades dos participantes
id_median <- median(dados$Idade)
## Calcula a porgentagem de mulheres entre os participantes
mul <- 100*(length(which(dados$Genero == "Feminino"))/length(dados$Genero))
## Faz uma lista com todos os resultados
final_list <- list(IMC=IMC, idade_media = id_med,
idade_mediana = id_median, porcentagem_mulheres = mul)
minha_funcao <- function(df.entrada){
## Calcula o índice de massa corporal (IMC) dos participantes
IMC <- df.entrada$Peso/quadra(df.entrada$Altura)
## Calcula a média das idade dos participantes
id_med <- mean(df.entrada$Idade)
## Calcula a mediana das idades dos participantes
id_median <- median(df.entrada$Idade)
## Calcula a porgentagem de mulheres entre os participantes
mul <- 100*(length(which(df.entrada$Genero == "Feminino"))/length(df.entrada$Genero))
## Faz uma lista com todos os resultados
final_list <- list(IMC=IMC, idade_media = id_med,
idade_mediana = id_median, porcentagem_mulheres = mul)
return(final_list)
}
test_list <- minha_funcao(df.entrada = dados)
test_list
minha_funcao <- function(df.entrada){
if (length(grep("Altura", colnames(df.entrada))) == 0 ||
length(grep("Peso", colnames(df.entrada))) == 0 ||
length(grep("Idade", colnames(df.entrada))) == 0 ||
length(grep("Genero", colnames(df.entrada))) == 0)
stop("Esta faltando alguma das informações.")
## Calcula o índice de massa corporal (IMC) dos participantes
IMC <- df.entrada$Peso/quadra(df.entrada$Altura)
## Calcula a média das idade dos participantes
id_med <- mean(df.entrada$Idade)
## Calcula a mediana das idades dos participantes
id_median <- median(df.entrada$Idade)
## Calcula a porgentagem de mulheres entre os participantes
mul <- 100*(length(which(df.entrada$Genero == "Feminino"))/length(df.entrada$Genero))
## Faz uma lista com todos os resultados
final_list <- list(IMC=IMC, idade_media = id_med,
idade_mediana = id_median, porcentagem_mulheres = mul)
return(final_list)
}
test_list <- minha_funcao(df.entrada = dados)
source("funcoes.R")
#### Bar plot ####
#É um gráfico interessante quando possuímos resultados da função table
gen <- table(dados$Genero)
barplot(gen)
nota_gen <- table(dados$ConhecimentoR, dados$Genero)
barplot(t(nota_gen))
#Busque explorar mais parâmetros no gráfico a seguir:
##Dica: tente alterar o nome dos eixos
plot(x = dados$Peso, y= dados$Altura)
#Linha de ajuste
abline(lm(Altura ~ Peso, data = dados), col="red")
#Verificar a correlação:
cor(dados$Altura, dados$Peso)
#1-) Fazer a divisão da tela:
par(mfrow=c(1,2))
#2-) Criar o barplot, da maneira que já aprendemos:
##Criar a tabela considerando as informacoes de Area e Genero
nota_gen <-table(dados$Area, dados$Genero)
##Note o parâmetro beside (que estava nas dicas)
barplot(t(nota_gen),beside = TRUE, col = c("wheat", "tomato2"), main = "Distribuição das
pessoas \n de acordo com área e nota do R", xlab = "Nota do R")
##Colocar a legenda no gráfico
legend("topright", title = "Gênero", legend=c("F","M"), fill = c("wheat", "tomato2"), bty = "n", cex = 0.7)
#3-) Criar o dotchart #Criar a coluna atribuindo uma cor para cada área
dados$color[dados$Area=="Exatas"] <- "darkblue"
dados$color[dados$Area=="Biologicas"] <- "darkgreen"
dados$color[dados$Area=="Humanas"] <- "orange"
dados$color[dados$Area=="Interdiciplinar"] <- "red"
dados$color[dados$Area=="Agrarias"] <- "black"
##Colocar os pesos em ordem:
dados <- dados[order(dados$Peso),]
##Colocar o título, note que o '\n' está sendo usado para fazer a quebra de linha:
dotchart(dados$Peso, labels = dados$Cidade, groups = as.factor(dados$Area),
color = dados$color, font=2, main = "Peso de acordo com as cidades, \n agrupando por área",
xlab = "Peso", pch = 7)
#4-) Manter novamente uma figura por gráfico
par(mfrow=c(1,1))
library("ggplot2")
ggplot(dados) +
geom_point(aes(x=Peso, y=Altura))
ggplot(dados) +
geom_point(aes(x=Peso, y=Altura, colour=Genero))
ggplot(dados) +
geom_point(aes(x=Peso, y=Altura, color=Genero), size=12)
ggplot(dados) +
geom_boxplot(aes(x=Area, y=ConhecimentoR))
ggplot(dados) +
geom_boxplot(aes(x=Area, y=ConhecimentoR, fill=Area))
ggplot(dados) +
geom_boxplot(aes(x=Area, y=ConhecimentoR, fill=Area), show.legend = FALSE)
library('tm')
library('SnowballC')
library('wordcloud')
dataCorpus <- Corpus(VectorSource(dados$Motivacao))
dataCorpus <- tm_map(dataCorpus, content_transformer(tolower))
dataCorpus <- tm_map(dataCorpus, removePunctuation)
dataCorpus <- tm_map(dataCorpus, removeWords, stopwords('pt'))
wordcloud(dataCorpus,max.words=100,colors=c("#2553A4","#11A858"))
# Carregar os pacotes
library("dplyr")
library("osmdata")
library("ggmap")
library("sf")
library("rnaturalearth")
library("rnaturalearthdata")
library("rgeos")
# Encontrar latitude e longitude das cidades
cidades <- data.frame(Long=NA, Lat=NA)
for(idx in 1:nrow(dados)){
latLong <- getbb(paste0(dados$Cidade[idx]," ", "Brazil"))
cidades[idx, ] <- rowMeans(latLong)
}
# Obter as fronteiras no mapa mundial
world <- ne_countries(scale = "medium", returnclass = "sf")
#Fazer o mapa
ggplot(data = world) +
geom_sf() +
geom_point(data = cidades,
aes(x = Long, y = Lat, fill = "red"),
size = 2, shape = 21, show.legend = FALSE) +
coord_sf(xlim = c(-74, -30), ylim = c(-35, 5), expand = FALSE)
str(dados)
# Certifique-se que esta lidando com variável categórica (fator)
dados$Genero <- as.factor(dados$Genero)
tapply(dados$Altura, dados$Genero, summary)
tapply(dados$Peso, dados$Genero, summary)
mod1 <- lm(Peso ~ Genero, data = dados)
summary(mod1)
# ou o equivalente
mod1 <- aov(Peso ~ Genero, data = dados)
summary(mod1)
load("clima_lond.RData")
# Verificando se as variáveis categórias estão como fatores
str(clima_lond)
clima_lond$dia <- as.factor(clima_lond$dia)
# A precipitação nesse caso é uma variável contínua, nao categórica, para transformá-la use:
clima_lond$prec.mm <- as.numeric(as.character(clima_lond$prec.mm))
# Já com o tapply podemos ver as diferenças
tapply(clima_lond$prec.mm, clima_lond$Mes, summary)
levels(clima_lond$Mes)
pos <- match(c("Janeiro", "Fevereiro", "Marco", "Abril", "Maio", "Junho"), levels(clima_lond$Mes))
pos
clima_lond$Mes = factor(clima_lond$Mes,
levels(clima_lond$Mes)[pos])
# Refazendo
tapply(clima_lond$prec.mm, clima_lond$Mes, summary)
plot(prec.mm~Mes, data = clima_lond, main="Médias",
xlab = "Meses do ano de 2017",
ylab = "Precipitação em mm")
barplot(tapply(clima_lond$prec.mm, clima_lond$Mes, sum),
main="Total Mensal",
xlab = "Meses do ano de 2017",
ylab = "Precipitação em mm")
mod <- lm(prec.mm ~ Mes, data = clima_lond)
summary(mod)
mod <- lm(prec.mm ~ dia, data = clima_lond)
summary(mod)
modaov <- aov(prec.mm ~ Mes, data = clima_lond)
tukey.test <- TukeyHSD(x=modaov, 'Mes', conf.level=0.95)
tukey.test
#rm(list = ls())
ls()
#setwd("/home/kaio/Desktop/Curso_ESALQ_R")
getwd()
data <- read.table("cafe.txt", h = TRUE, sep = "\t", dec = ",")
str(data)
# Transformar em fator
data$rep <- as.factor(data$rep)
data$prog <- as.factor(data$prog)
data$colheita <- as.factor(data$colheita)
str(data)
# Outra opção
data <- transform(data, rep = factor(rep), prog = factor(prog), colheita = factor(colheita))
str(data)
# Indexar primeita colheita
Colheita_1 <- subset(data, colheita == 1)
str(Colheita_1)
# Droplevels
Colheita_1 <- droplevels(subset(data, colheita == 1))
str(Colheita_1)
# Modelo
Modelo1 <- aov(prod ~ rep + prog,
contrasts = list(prog = "contr.sum"),
data = Colheita_1)
anova(Modelo1)
####################################################
###verificar Pressupostos da análise de variância###
####################################################
names(Modelo1)
Modelo1_residuals <- Modelo1$residuals #armazenando os erros ou res?duos
# teste de Normalidade DOS ERROS##
#---------------------------------#
shapiro.test (Modelo1_residuals) # Hipótese de Nulidade
# a hipótese de que os erros são normais, nesse caso, como o p-value = 0.24
# ou seja, >0.05 ou 0.01 ou qualquer alfa adotado, não se rejeita a hipotese de normalidade
#Verificar pressupostos de análises
diagnostics(Modelo1$residuals, Modelo1$fitted.values)
diagnostics(Modelo1$residuals, Modelo1$fitted.values)
# Verificar outlier
outlier(Modelo1$residuals, alpha=0.05)
# Index output
QME <- anova(Modelo1)["Residuals", "Mean Sq"]
QME
med <- mean(data$prod, na.rm = TRUE)
med
# Calcular CV
CVe <- (sqrt(QME)/med)*100
CV_E <- function(anova, med){
QME <- anova(anova)["Residuals", "Mean Sq"]
CVe <- (sqrt(QME)/med)*100
return(CVe)
}
##
CV_E(anova = Modelo1, med = med)
# Herdabilidade
n_rep <- nlevels(Colheita_1$rep)
VG <- (anova(Modelo1)["prog", "Mean Sq"]- QME)/n_rep
H_2 <- VG/ (VG + VE)
H_2
VE <- QME
H_2 <- VG/ (VG + VE)
H_2
# Teste de comparações mútiplas
# análise de variância utilizando o ExpDes
#install.packages("ExpDes")
library(ExpDes)
rbd(Colheita_1$prog, Colheita_1$rep, Colheita_1$prod, mcomp = "tukey", sigT = 0.05, sigF = 0.05)
# Teste Sk
rbd(Colheita_1$prog, Colheita_1$rep, Colheita_1$prod, mcomp = "sk", sigT = 0.05, sigF = 0.05)
# função by é similar ao subset
by(data, data$colheita, function (x) anova(aov(prod ~ prog + rep, data= x)))
#outra opção selecionando apenas a parte da dataframe onde colheita igual a "2"
anova(aov(data$prod ~ data$prog + data$rep, data = data[data$colheita==2,]))
# mais uma opção
indiv <- lapply(split(data, data$colheita), aov, formula = prod ~ rep + prog)
lapply(indiv, summary)
#install.packages("agricolae")
library(agricolae)
trt < -c("0","1","2","5","10","20","50","100","Dina")
trt <- c("0","1","2","5","10","20","50","100","Dina")
rcbd <- design.rcbd(trt, 6, serie = 1, seed = 1, "default") # seed = 1
rcbd # Planilha de campo
# Salvar Sorteio
write.table(rcbd,"SORTEIO.txt", row.names=FALSE, sep="\t")
file.show("SORTEIO.txt")
install.packages(c("ggmap", "osmdata", "rgeos", "rnaturalearth", "rnaturalearthdata", "SnowballC", "tm", "wordcloud"))
install.packages("osmdata")
install.packages("openssl")
##
c(4,2,1,5)+c(5,2,6,1)
c(4,2,1,5)+1
